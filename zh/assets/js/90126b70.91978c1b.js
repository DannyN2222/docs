"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[79],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),h=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=h(a),u=i,m=p["".concat(l,".").concat(u)]||p[u]||c[u]||s;return a?n.createElement(m,o(o({ref:t},d),{},{components:a})):n.createElement(m,o({ref:t},d))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,o=new Array(s);o[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:i,o[1]=r;for(var h=2;h<s;h++)o[h]=a[h];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8722:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>h});var n=a(7462),i=(a(7294),a(3905));const s={sidebar_position:4},o="Shares",r={unversionedId:"unraid-os/manual/shares",id:"unraid-os/manual/shares",title:"Shares",description:"Once you have assigned some devices to Unraid and started the array, you",source:"@site/docs/unraid-os/manual/shares.md",sourceDirName:"unraid-os/manual",slug:"/unraid-os/manual/shares",permalink:"/zh/unraid-os/manual/shares",draft:!1,editUrl:"https://github.com/unraid/docs/tree/main/docs/unraid-os/manual/shares.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"unraidSidebar",previous:{title:"Storage Management",permalink:"/zh/unraid-os/manual/storage-management"},next:{title:"Docker Management",permalink:"/zh/unraid-os/manual/docker-management"}},l={},h=[{value:"User Shares",id:"user-shares",level:2},{value:"Allocation method",id:"allocation-method",level:3},{value:"High Water",id:"high-water",level:4},{value:"Most Free",id:"most-free",level:4},{value:"Fill-Up",id:"fill-up",level:4},{value:"Min. Free Space",id:"min-free-space",level:3},{value:"Split level",id:"split-level",level:3},{value:"<strong>Disable Split Level</strong>",id:"disable-split-level",level:5},{value:"<strong>Split Level = 1 Example</strong>",id:"split-level--1-example",level:5},{value:"<strong>Split Level 0</strong>",id:"split-level-0",level:5},{value:"<strong>Split By Character</strong>",id:"split-by-character",level:5},{value:"Included and Excluded disk(s)",id:"included-and-excluded-disks",level:3},{value:"Default Shares",id:"default-shares",level:3},{value:"Unraid 6.12",id:"unraid-612",level:3},{value:"<strong>Primary Storage:</strong>",id:"primary-storage",level:4},{value:"<strong>Secondary Storage:</strong>",id:"secondary-storage",level:4},{value:"Unraid 6.11 and earlier",id:"unraid-611-and-earlier",level:3},{value:"<strong>Use Cache (and Mover Behavior with User Shares)</strong>",id:"use-cache-and-mover-behavior-with-user-shares",level:4},{value:"<strong>Moving Files from a Pool (cache) to the Array</strong>",id:"moving-files-from-a-pool-cache-to-the-array",level:5},{value:"<strong>Moving Files from the Array to a Pool (cache)</strong>",id:"moving-files-from-the-array-to-a-pool-cache",level:5},{value:"Disk Shares",id:"disk-shares",level:2},{value:"Network access",id:"network-access",level:2},{value:"Access Permissions",id:"access-permissions",level:2}],d={toc:h},p="wrapper";function c(e){let{components:t,...s}=e;return(0,i.kt)(p,(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"shares"},"Shares"),(0,i.kt)("p",null,"Once you have assigned some devices to Unraid and started the array, you\ncan create ",(0,i.kt)("em",{parentName:"p"},"shares")," to simplify how you store data across multiple disks\nin the array. Unraid will automatically create a handful of shares for\nyou that it needs to support common plugins, containers, and virtual\nmachines, but you can also create your own shares for storing other\ntypes of data. Unraid supports 2 types of share:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"User Shares"),(0,i.kt)("li",{parentName:"ul"},"Disk Shares")),(0,i.kt)("p",null,"You can control which of these types of shares are to be used under\nSettings-",">","Global Share Settings. The default on Unraid is to have User\nShares enabled but Disk Shares disabled."),(0,i.kt)("p",null,"It is sometimes important to realize that these are two different views\nof the ",(0,i.kt)("strong",{parentName:"p"},"same")," underlying file system. Every file/folder that appears\nunder a User Share will also appear under the Disk Share for the\nphysical drive that is storing the file/folder."),(0,i.kt)("h2",{id:"user-shares"},"User Shares"),(0,i.kt)("p",null,"User Shares can be enabled/disabled via Settings-",">","Global Share\nSettings."),(0,i.kt)("p",null,"From the ",(0,i.kt)("strong",{parentName:"p"},"Shares")," tab, you can either ",(0,i.kt)("em",{parentName:"p"},"create")," a new share or ",(0,i.kt)("em",{parentName:"p"},"edit'\nan existing share. Click the ",(0,i.kt)("strong",{parentName:"em"},"Help")," icon in the top-right of the\nUnraid webGui when configuring shares for more information on the\nsettings available.")),(0,i.kt)("p",null,"User Shares are implemented by using Linux Fuse file system support.\nWhat they do is provide an aggregated view of all top level folders of\nthe same name across the cache and the array drives. The name of this\ntop level folder is used as the share name. From a user perspective this\ngives a view that can span multiple drives when viewed at the network\nlevel. Note that no individual file will span multiple drives - it is\njust the directory level that is given a unified view."),(0,i.kt)("p",null,"When viewed at the Linux level then User Shares will appear under the\npath ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"/mnt/user")),". This includes the files on the main array and also\nany for the share on any pool. It is important to note that a User Share\nis just a logical view imposed on top of the underlying physical file\nsystem so you can see the same files if you look at the physical level\n(as described below for Disk Shares."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Current releases of Unraid also include the mount point\n",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"/mnt/user0"))," that shows the files in User Shares OMITTING any\nfiles for a share that are on any pool. This is just a different\nview of the files on your server. ",(0,i.kt)("em",{parentName:"li"},"However This mount point is now\ndeprecated and may stop being available in a future Unraid release."))),(0,i.kt)("p",null,"Normally one creates User Shares using the Shares tab. However if you\nmanually create a top level folder on any drive the system will\nautomatically consider this to be a user Share and give it default\nsettings."),(0,i.kt)("p",null,"Which physical drive in the main array is used to store a physical file\nis controlled by a number of settings for the share:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Allocation method"),": This has various options:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Most Free"),": This option means that new files should go to the\ndisk with the most free space. It has the downside that one is\ncontinually switching drives which keeps the drive involved spun\nup."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Fill Up"),": This option means simply fill up drives in disk\norder until the free space falls below the Minimum Free Space\nsetting, and when that happens move onto the next disk. Many\nusers like this setting because their content is static in\nnature to they find this a simple way to manage their storage."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"High Water"),": (default) This option attempts to provide a\ncompromise between continually switching drives as is caused by\nthe ",(0,i.kt)("strong",{parentName:"li"},"Most Free")," setting and filling up disks in a sensible\nmanner, but not fill each drive to capacity before using the\nnext one. The aim is to allow related files do be kept together\non the same drive and to let unused drives be spun down.")))),(0,i.kt)("p",null,":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},":   It works with switch points based by continually halving the\n    size of the largest drive in the array.\n:   Many people find this confusing (particularly in an array with\n    drives of varying size). so as an example if you had an array\n    consisting of drives of 8TB, 3Tb and 2TB\n    -   The largest drive is 8TB so the switch points are 4TB, 2TB,\n        1Tb etc.\n    -   The 4TB switch point is active so The 8TB Drive one would be\n        filled to 4TB free space left.\n    -   The 2TB switch point becomes active so the 8TB and 3TB\n        drives each gets used in disk order until it they have 2TB\n        free space\n    -   The 1TB switch point becomes active so each drive now gets\n        used in disk order until it only has 1TB free space.\n    -   etc\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Included")," or ",(0,i.kt)("strong",{parentName:"li"},"excluded")," drives: These settings allow you to\ncontrol which array drives can hold files for the share. Never set\nboth values, set only the one that is most convenient for you. If no\ndrives are specified under these settings then all drives allowed\nunder ",(0,i.kt)("em",{parentName:"li"},"Settings ",">",">"," Global Share settings")," are allowed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Split level"),": This setting controls how files should be grouped.")),(0,i.kt)("p",null,": ",(0,i.kt)("strong",{parentName:"p"},"Important"),": in the event of there being contentions between the\n",(0,i.kt)("strong",{parentName:"p"},"Minimum free space"),", ",(0,i.kt)("strong",{parentName:"p"},"Split Level")," and the ",(0,i.kt)("strong",{parentName:"p"},"Allocation\nmethod")," settings in deciding which would be an appropriate drive to\nuse the ",(0,i.kt)("strong",{parentName:"p"},"Split level")," setting always wins. This means that you can\nget an out-of-space error even though there is plenty of space on\nother array drives that the share can logically use."),(0,i.kt)("p",null,"Changing any of these settings for a share only affects where any new\nfiles are put. Any files already present in the share are left where\nthey are located when a setting is changed. It takes Manual action to\nmove existing files."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Important"),": The Linux file system used by Unraid are case sensitive\nwhile the SMB share system is not. As an example this means that a\nfolder at the Linux level a folder called 'media' is different to one\ncalled 'Media'. However at the network level case is ignored so for\nexample 'media', Media', 'MEDIA' would all be the same share.\nHowever to take this example further you would only get the content of\none of the underlying 'media' or 'Media' folders to appear at the\nnetwork share level - and it can be non-obvious which one this would be."),(0,i.kt)("p",null,"The following sections proved more detail on how these settings work:"),(0,i.kt)("h3",{id:"allocation-method"},"Allocation method"),(0,i.kt)("p",null,"When a new User share is created, or when any object (file or directory)\nis created within a User share, the system must determine which data\ndisk the User share or object will be created on. In general, a new User\nshare, or object within a User share, will be created on the data disk\nwith the most free space. However there are a set of share configuration\nparameters available to fine tune disk allocation."),(0,i.kt)("p",null,"The basic allocation strategy for a share is defined by the Allocation\nmethod configuration parameter. You may select one of three allocation\nmethods for the system to use."),(0,i.kt)("h4",{id:"high-water"},"High Water"),(0,i.kt)("p",null,"The high water allocation method attempts to step fill each disk so at\nthe end of each step there is an equal free space left on each disk. The\nidea is to progressively fill each disk but not constantly go back and\nforth between disks each time new data is written to the array. Most\ntimes, only a single disk will be needed when writing a series of files\nto the array so the array will only spin-up the needed disk. The high\nwater level is initially set equal to one-half of the size of the\nlargest disk. A new high water level is again set to one-half of the\nprevious high level once all the disks have less free space than the\ncurrent high water level."),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(920).Z,title:"File:High-Water Allocation Method.JPG",width:"836",height:"505"})),(0,i.kt)("p",null,"The above example shows what will occur when there is a mix of 4 disks\nvarying is size from 500gig to 2T in size."),(0,i.kt)("p",null,"First Pass - The high water level is set to one-half of the size of the\n2T drive or 1T. Each disk will be filled until it has \\<1T of free space\nremaining. This means no data is stored on disk1 or disk2 since both\nalready have \\<1T of free space. 500gig of data will be stored on disk3\nfollowed by 1T of data being stored on disk4."),(0,i.kt)("p",null,"Second Pass - The high water level is reset to one-half of the previous\nlevel or 500gig. Each disk will be filled until it has \\<500gig of free\nspace remaining. This means no data is stored on disk1 since it already\nhas \\<500gig of free space. 500gig of data will be stored on disk2 and\nthen 500gig of data will be stored on disk3 and finally 500gig of data\nwill be stored on disk4."),(0,i.kt)("p",null,"Third Pass - The high water level is again reset to one-half of the\nprevious level or 250gig. Each disk will be filled until it has \\<250gig\nof free space remaining. 250gig of data will be stored on disk1 and then\n250gig of data will be stored on disk2 and then 250gig of data will be\nstored on disk3 and finally 250gig of data will be stored on disk4. An\ninteresting note is that the 500gig disk does not get used at all until\nthe third pass. Don't be concerned if the smaller sized disks don't\nimmediately get used with this method."),(0,i.kt)("p",null,"This pattern will continue with progressively smaller high water levels\nuntil the disks are full."),(0,i.kt)("h4",{id:"most-free"},"Most Free"),(0,i.kt)("p",null,"The most free allocation method simply picks the disk with the most free\nspace and writes the data to that disk. Each time a file is written\nUnraid will check the free space on the disks and pick the one with the\nmost free space."),(0,i.kt)("h4",{id:"fill-up"},"Fill-Up"),(0,i.kt)("p",null,"The fill-up allocation method simply attempts to fill each disk in order\nfrom the lowest numbered disk to the highest numbered disk. The fill-up\nallocation method must be used in conjunction with the minimum free\nspace setting. Otherwise, Unraid will begin to give disk full errors and\nnot allow any more transfers once the first disk gets close to being\nfull.\\"),(0,i.kt)("h3",{id:"min-free-space"},"Min. Free Space"),(0,i.kt)("p",null,"The minimum free space setting is used with the allocation method and\nsplit level. The Minimum Free space setting doesn't control how much\nspace is kept free, but instead it controls how much space must be free\nfor a drive to be chosen for a new file. The minimum free space setting\ntherefore tells Unraid to stop putting new content onto the disk when\nthe free space falls below the level you set (as long as the Split Level\nsetting indicates it can be split to a new disk). This must be used with\nthe fill-up allocation method or disk full errors will occur when there\nis not enough space to fit a file you are trying to write to the array."),(0,i.kt)("p",null,'First a brief explanation of how Unraid will typically receive a file.\nUnraid typically receives data in this manner. First, Unraid receives\nthe request to store a file, named for example "file.eg". At this\ntime, Unraid has no idea how big "file.eg" is so Unraid will pick a\nspot to place "file.eg" and begin to store the file data as the data\nis transferred over the network. Now, this is important because Unraid\nmay pick a storage disk that does not have enough space to store the\ncomplete "file.eg". Unraid doesn\'t know there is not enough space\nwhen it first places the file so Unraid will only find out the disk\ndoesn\'t have enough space when the disk is full. At this point, the\ntransfer will fail with a disk full error.'),(0,i.kt)("p",null,"So, Unraid will write to a different disk if the minimum free space is\nset to a value larger than the biggest file size you will ever transfer.\nThe recommended setting is 2 times the largest file size you will ever\ntransfer. For example, if the largest file you have is 8gig in size then\nset the minimum free space to 16gig. This allows you to transfer files\nthat may vary in size somewhat and not accidentally transfer one too\nlarge. The minimum free space is set in kilo-bytes."),(0,i.kt)("p",null,"Here are some examples of the minimum free space setting;"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Free Space")," ",(0,i.kt)("strong",{parentName:"p"},"Value"),"\n500 meg 500000\n20 gig 20000000\n40 gig 40000000"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Note that unRAID will still place files on the disk if the split level\ndoes not allow the files to be placed on another disk with more free\nspace."),(0,i.kt)("p",null,"Also note that Unraid will typically not move a file onto a new disk if\nyou're over-writing or updating it. For example, a backup file that\ngrows in size over time could end up filling a disk and causing a disk\nfull error.\\\nIMPORTANT; There is also a Minkmum Free Space setting for cache pools.\nThis is used to determine when a new file for a User Share with the Use\nCache setting having a value of Yes or Prefer should be written to the\ncache or instead bypass the cache and go directly to the array. This\nneeds to be set if you want to avoid filling a cache pool which can\ncause problems. As for this value when used with a User Share hare it\nshould be larger than the largest file you intend to write, and some\npeople like to make it significantly larger. You get to this setting by\nclicking on a pool on the Main tab."),(0,i.kt)("h3",{id:"split-level"},"Split level"),(0,i.kt)("p",null,"The split level setting tells Unraid how many folder levels are allowed\nto be created on multiple disks. The split level can be used to ensure\nthat the contents of a folder are kept on the same disk. The split level\nnumbering starts with the user share being the top level and given the\nnumber 1."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": in the event of there being contention between the\nvarious settings for a share over which array drive to select for a file\nthe Split Level setting always takes precedence. This means the\nAllocation Method and Minimum Free Space settings end up being\nover-ridden. This can mean Unraid chooses a drive which does not have\nenough space for the file so that an out-of-space error subsequently\noccurs for the file."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"The Split level setting is one that many users find confusing to here\nis a more detailed description of how it works."))),(0,i.kt)("p",null,'Here is an example showing a possible directory structure for a user\nshare called "Media".'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," I (the original author of this section) consider combining\nmedia types into a single large share a poor way to store media. I use a\nshare for each media type. Movies is a share and TV shows is a share. I\ncombined the movies and TV shows to show the pitfalls in the split\nlevels when doing this as explained after the figure."),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(9204).Z,width:"700",height:"255"})),(0,i.kt)("p",null,"Here is an explanation of the different split levels, referenced to the\nfolder structure above;"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Level 1",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'This is what you have if in the GUI you select the\n"Automatically split only the top level directory as required"\noption.'),(0,i.kt)("li",{parentName:"ul"},"The top level Media share can be created on every disk."),(0,i.kt)("li",{parentName:"ul"},"Every other folder under the Media share must remain on a single\ndisk."),(0,i.kt)("li",{parentName:"ul"},"This setting does not allow the SD Movies, HD Movies, Kids\nMovies or TV Shows folders to spread to multiple disks."),(0,i.kt)("li",{parentName:"ul"},"This setting is too low for all the media."))),(0,i.kt)("li",{parentName:"ol"},"Level 2",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'this is what you have if in the GUI you select the\n"Automatically split only the top two directory levels as\nrequired" option.'),(0,i.kt)("li",{parentName:"ul"},"The top level Media share can be created on every disk."),(0,i.kt)("li",{parentName:"ul"},"The SD Movies, HD Movies, Kids Movies and TV Shows folders can\nbe created on every disk."),(0,i.kt)("li",{parentName:"ul"},"Each Movie Folder and TV Show Folder must remain on a single\ndisk."),(0,i.kt)("li",{parentName:"ul"},"This setting may work well. It will keep each movie and each TV\nseries together on a single disk."),(0,i.kt)("li",{parentName:"ul"},"This setting may give issues because it keeps each TV series on\na single disk. So, a disk may fill as new TV seasons are added\nto a TV show which is on a disk which is close to full."))),(0,i.kt)("li",{parentName:"ol"},"Level 3",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'This is what you have if in the GUI you select "Automatically\nsplit only the top three directory levels as required".'),(0,i.kt)("li",{parentName:"ul"},"The top level Media share can be created on every disk."),(0,i.kt)("li",{parentName:"ul"},"The SD Movies, HD Movies, Kids Movies and TV Shows folders can\nbe created on every disk."),(0,i.kt)("li",{parentName:"ul"},"Each Movie Folder and TV Show Folder can be created on every\ndisk."),(0,i.kt)("li",{parentName:"ul"},"Each Season Folder must remain on a single disk."),(0,i.kt)("li",{parentName:"ul"},"This setting will allow the contents stored in each Movie Folder\nto be spread out onto multiple disks."),(0,i.kt)("li",{parentName:"ul"},"This setting is too high for the different movie types."))),(0,i.kt)("li",{parentName:"ol"},"Level 4",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'This is what you have if in the GUI you select "Automatically\nsplit only the top four directory levels as required".'),(0,i.kt)("li",{parentName:"ul"},"The top level Media share can be created on every disk."),(0,i.kt)("li",{parentName:"ul"},"The SD Movies, HD Movies, Kids Movies and TV Shows folders can\nbe created on every disk."),(0,i.kt)("li",{parentName:"ul"},"Each Movie Folder and TV Show Folder can be created on every\ndisk."),(0,i.kt)("li",{parentName:"ul"},"Each Season Folder can be created on every disk."),(0,i.kt)("li",{parentName:"ul"},"This setting is too high because it will allow the contents of\nevery folder to be spread out onto multiple disks. The split\nlevel is not being used to keep similar content together.")))),(0,i.kt)("p",null,"The only valid split level for the above example is 2. This causes a\nsplit level limitation which forces each complete TV series to a single\ndisk. This can force a new TV season to be placed on a disk which is\nalmost full and result in out of space errors once new episodes\ncompletely fill the disk. The split level can't be increased to 3\nbecause each individual movie would not be contained to a single disk.\\\n\\\n\\\nThe first way to fix this split level mismatch issue is to create\nseparate shares for the movies and the TV shows. This way, the movies\ncan be set to use a split level of 2 and the TV shows can use a split\nlevel of 3."),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(4224).Z,title:"File:Split_level_2.JPG",width:"726",height:"237"})),(0,i.kt)("p",null,'For Movies use a split level = 2. This allows the "SD Movies", "HD\nMovies" and "Kids Movies" folders to be placed on every disk and it\nkeeps each individual movie folder on a single disk. This way, any\nsingle movie folder and the contents of the movie folder will remain on\na single disk.'),(0,i.kt)("p",null,"For TV_Shows use a split level of either 1 or 2. A split level of 1 will\nkeep each TV series on a single disk and split level of 2 will keep each\nseason on a single disk. The split level of 2 means that the complete TV\nseries can be stored on multiple disks, however each individual season\nof that TV series will be on a single disk.\\\n\\\n\\\nThe second way to fix the issue is to add another folder level to the\nmovies, starting first with a Movies folder in the Media share and then\nplacing the different movie types below this."),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(8376).Z,title:"File:Split_level_3.JPG",width:"644",height:"291"})),(0,i.kt)("p",null,"This user share structure must use split level = 3. SD Movies, HD\nMovies, Kids Movies and each TV series can exist on multiple disks. This\nstructure means each TV season can be on a different disk. This has the\nopposite issue compared to the first example. You can not use split\nlevel 2 to force each complete TV series to remain on a single disk\nwithout messing up the ability of the movies to split to every disk.\\\n\\\n\\\nSome things to keep in mind."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'The above examples are to demonstrate the use of the split level. It\nis not necessary to store your media sorted in the same format as\nthe above example illustrates. You may want to use a Movies share\nand then just place a "Movie Name" folder for each movie directly\ninto the share without sorting the movies by type.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"It is completely valid to force each complete TV series to stay on a\nsingle disk. Just understand that a continuing TV series will keep\nfilling the disk where it is first placed. This may require manual\nintervention to shift some TV series from an almost full disk to an\nempty disk. Using the Most Free allocation method can help eliminate\nthe issue since a completely new TV series would be placed on the\ndisk with the most free space.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The above TV example applies to any similar share. It could apply to\na Pictures share where you store the pictures in folders based on\nthe year (2010, 2011, 2012 etc) or it could apply to a Music share\nwhere you store the music in a folder for each artist. In these\ncases, a split level of 1 would keep a whole year of pictures on a\nsingle disk or it would keep all the music by an artist on a single\ndisk."))),(0,i.kt)("p",null,"\\\n\\\n\\\n\\"),(0,i.kt)("h5",{id:"disable-split-level"},(0,i.kt)("strong",{parentName:"h5"},"Disable Split Level")),(0,i.kt)("p",null,"It is also possible to disable the split level by setting a high split\nlevel. A file copy or move will fail if a folder is locked to a full\ndisk and an attempt is made to add more files into that folder. Setting\na high split level will ensure each file will get written to the server\nas long as a disk has space for it."),(0,i.kt)("h5",{id:"split-level--1-example"},(0,i.kt)("strong",{parentName:"h5"},"Split Level = 1 Example")),(0,i.kt)("p",null,"The following example demonstrates how the share behaves when the split\nlevel is set to 1. The Share name is New_Movies. Each movie stored in\nthis share has its own folder. Inside the movie folder is the movie file\nas well as some metadata files used by MediaBrowser."),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(5546).Z,title:"File:Movie Share.jpg",width:"565",height:"626"})),(0,i.kt)("p",null,"The above Windows Explorer screen shot shows the file structure of the\nNew_Movies share on the left and the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<u>"),"{=html}A\nHistory of Violence",(0,i.kt)("inlineCode",{parentName:"p"},"</u>"),"{=html} movie folder on the right. The levels\nfor this share are labeled on the example. This is what split level = 1\nmeans:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A New_Movies folder can be created on each disk allowed by the\ninclude and exclude disk settings. A new New_Movies folder will be\ncreated on the next disk in line when the allocation method calls\nfor Unraid to begin filling the next disk. Note that the New_Movies\nfolder will only be created on the next disk in line when it is\nnecessary and not when the share is created.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<u>"),"{=html}A History of Violence",(0,i.kt)("inlineCode",{parentName:"p"},"</u>"),"{=html} folder can only\nexist on one disk. Once it is created on the disk, all of the\ncontents will remain on the same disk. Any changes or additions to\nthis folder will remain on the same disk. For example, a new file\ncalled movie.nfo for the XBMC metadata might be created in this\nfolder in the future. The movie.nfo file will be created in the\nexisting ",(0,i.kt)("inlineCode",{parentName:"p"},"<u>"),"{=html}A History of Violence",(0,i.kt)("inlineCode",{parentName:"p"},"</u>"),"{=html} folder. A\nduplicate ",(0,i.kt)("inlineCode",{parentName:"p"},"<u>"),"{=html}A History of Violence",(0,i.kt)("inlineCode",{parentName:"p"},"</u>"),"{=html} folder will\nnot be created on another disk to store this new file."))),(0,i.kt)("p",null,"You will notice that the movie folders ",(0,i.kt)("inlineCode",{parentName:"p"},"<u>"),"{=html}500 Days of Summer\n(2009)",(0,i.kt)("inlineCode",{parentName:"p"},"</u>"),"{=html} and ",(0,i.kt)("inlineCode",{parentName:"p"},"<u>"),"{=html}2 Fast 2 Furious (2003)",(0,i.kt)("inlineCode",{parentName:"p"},"</u>"),"{=html}\nboth appear in the New_Movies share. The next screen shot will show how\neach of these files is stored on a separate disk."),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(4959).Z,title:"File:Movies Share Disk View.JPG",width:"1208",height:"705"})),(0,i.kt)("p",null,"The above screen shot shows side by side Window Explorer views of the\nfile structure stored on disk1 and disk2. On the left is disk1 and on\nthe right is disk2. The left Explorer window shows the contents of\ndisk1. The New_Movies share is a folder stored at the top level or the\nroot of disk1 with the individual movie directories stored in this\ndirectory. The right Explorer window shows the contents of disk2. The\nNew_Movies share is a folder stored at the top level or the root of\ndisk2 with the individual movie folders stored in this directory. As\nfiles were being moved into the New_Movies share, Unraid created the\nNew_Movies folder on both disk1 and disk2 to store these files."),(0,i.kt)("p",null,"The windows side by side can be used to examine the contents of the\nNew_Movies share on a disk by disk basis. You will notice that the movie\nfolder ",(0,i.kt)("inlineCode",{parentName:"p"},"<u>"),"{=html}500 Days of Summer (2009)",(0,i.kt)("inlineCode",{parentName:"p"},"</u>"),"{=html} is stored on\ndisk1 and the movie folder ",(0,i.kt)("inlineCode",{parentName:"p"},"<u>"),"{=html}2 Fast 2 Furious\n(2003)",(0,i.kt)("inlineCode",{parentName:"p"},"</u>"),"{=html} is stored on disk2. As previously noted, Unraid\ncombines the movies stored on disk1 and disk2 into one network share\ncalled New_Movies and both movies appear in the New_Movies network\nshare."),(0,i.kt)("p",null,"Take note that a share called Movies is also visible on disk2."),(0,i.kt)("h5",{id:"split-level-0"},(0,i.kt)("strong",{parentName:"h5"},"Split Level 0")),(0,i.kt)("p",null,'this is what you have if in the GUI you select "Manual: do not\nAutomatically split directories".'),(0,i.kt)("p",null,"Split level 0 is a special case. Split level 0 requires you to create\nthe desired top level or parent folder structure. Unraid will\nunconditionally create an object on the disk that contains the parent\nfolders. Unraid will choose which disk to use according to the\nallocation method if the parent folders exist on multiple disks."),(0,i.kt)("p",null,"If you set the Split level to 0, then all directories/files created\nunder that share will be on the same disk where the directory within\nthat share share was originally created. In other words, use level 0 to\nnot allow the share to split automatically across disks"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:")," If you create the same folder structure on multiple disks then\nUnraid will apply the other share settings to decide which disk to use."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"The server has 4 disks. A user share called Media is desired. Different\ntypes of media will be stored in this share. The desired structure is;"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"disk1 - will hold the DVD movies."),(0,i.kt)("li",{parentName:"ul"},"disk2 - will hold the BluRay movies."),(0,i.kt)("li",{parentName:"ul"},"disk3 - will hold the BluRay movies."),(0,i.kt)("li",{parentName:"ul"},"disk4 - will hold the TV series.")),(0,i.kt)("p",null,"The desired structure is illustrated below."),(0,i.kt)("p",null,(0,i.kt)("img",{src:a(3941).Z,title:"File:Level 0.JPG",width:"1369",height:"388"})),(0,i.kt)("p",null,"On the left side is how the user share will appear and on the right side\nis the folder structure on each disk. The user will go to each disk and\ncreate the folders shown in red to create the storage as listed above.\nThen, the Media folder as well as the DVD Movies, BluRay Movies and TV\nShows folders become the parent folders for everything stored in the\nMedia share. The media will be sorted by disk as follows;"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Movies placed in the DVD Movies folder will go to disk1."),(0,i.kt)("li",{parentName:"ul"},"Movies placed in the BluRay Movies folder will go to disk2 or disk3.\nThe disk is selected by the allocation method."),(0,i.kt)("li",{parentName:"ul"},"TV shows placed in the TV Shows folder will go to disk4.")),(0,i.kt)("p",null,"Say one day that disk1 is full and disk5 is added to the server to hold\nnew DVD Movies. The same folders on disk1 must be created on the new\ndisk5. In other words, the folder Media and sub-folder DVD Movies must\nbe created on disk5. Then, Unraid can use either disk1 or disk5 to store\nDVD Movies."),(0,i.kt)("h5",{id:"split-by-character"},(0,i.kt)("strong",{parentName:"h5"},"Split By Character")),(0,i.kt)("p",null,"Specify a character in the split level box to use this method. Then,\nUnraid will not allow any folder name containing the character to split.\nFor example, set the split level to an opening square bracket ( [ )\ninstead of a number. Then, create each movie folder with the year\nencased in square brackets after the title in this manner - Iron Man 2\n","[2010]",". Unraid will see the opening square bracket ( [ ) and it will\nnot split this folder or any content stored inside this folder."),(0,i.kt)("p",null,"This type of split level can allow different levels of sub-folders to be\nspecified as not splitting simply by inserting the character into the\nfolder name which should not split. This can overcome the limitation of\nhaving a fixed split level for a share.\\\n\\\n\\"),(0,i.kt)("h3",{id:"included-and-excluded-disks"},"Included and Excluded disk(s)"),(0,i.kt)("p",null,'The included disk(s) and excluded disk(s) parameters control which disks\nare allowed to be used by each user share. These parameters can be used\nseparately or together to define the group of disks allowed for writing\nfiles to each user share. The disks are entered by disk number with a\ncomma separating each disk, for example "disk2,disk5".'),(0,i.kt)("p",null,"Unraid will first check the included disks(s) set and then the Excluded\ndisk(s) set when deciding which disk to place a file on. Then, Unraid\nwill use the split level and allocation method to pick a disk which is\nallowed to hold the file."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," The Include/Exclude settings at the individual share level\nonly control which disks new files can be written to. Files on other\ndisks that are in a folder corresponding to the share name will still\nshow up under that share for read purposes."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Included disk(s)")),(0,i.kt)("p",null,'The included disks(s) parameter defines the set of disks which are\ncandidates for allocation to that share. All disks may be used by the\nuser share when the Included disk(s) parameter is left blank. Specify\nthe disks to include here. For example, set the included disk(s) to\n"disk1,disk2,disk3" to allow the share to only use disk1, disk2 and\ndisk3.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Excluded disk(s)")),(0,i.kt)("p",null,'The excluded disk(s) parameter defines the set of disks which are\nexcluded from use by the user share. No disks are excluded from use by\nthe user share when the excluded disk(s) parameter is left blank.\nSpecify the disks to exclude here. For example, set the excluded disk(s)\nto "disk1,disk2" to restrict a share from using disk1 and disk2.\\\n\\\n\\'),(0,i.kt)("h3",{id:"default-shares"},"Default Shares"),(0,i.kt)("p",null,"If you have Docker or VMs enabled then a number of default shares are\nset up to support their use. It is not mandated that you use these\nshares (and the system will let you remove them if you do not want to\nuse them for their standard purpose) but it is recommended as it tends\nto make it easier to support users who encounter problems."),(0,i.kt)("p",null,"The shares that fall into this category are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"appdata"),": this is the default location for storing working files\nassociated with docker containers. Typically there will be a\nsub-folder for each docker container."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"system"),": this is the default location for storing the docker\napplication binaries, and VM XML templates"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"domains"),": this is the default location for storing virtual disk\nimages (vdisks) that are used by VMs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"isos"),": this is the default location for storing CD iso images for\nuse with VMs.")),(0,i.kt)("h3",{id:"unraid-612"},"Unraid 6.12"),(0,i.kt)("p",null,"The Unraid 6.12 release has introduced some new terminology to make it\nclearer to new users where files are initially placed and where they\nwill end up. The same functionality is present in earlier releases, but\nhas often been misunderstood by new users."),(0,i.kt)("h4",{id:"primary-storage"},(0,i.kt)("strong",{parentName:"h4"},"Primary Storage:")),(0,i.kt)("p",null,"This is the location to which ",(0,i.kt)("strong",{parentName:"p"},"new")," files will be written."),(0,i.kt)("p",null,"If Primary storage is below the Minimum Free Space setting then new\nfiles and folders will be created in Secondary storage, if configured"),(0,i.kt)("p",null,"For the Primary storage drop-down:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"this option is mandatory. ie, Primary storage must be selected"),(0,i.kt)("li",{parentName:"ul"},"any named pool can be selected"),(0,i.kt)("li",{parentName:"ul"},'"Array" can be selected (meaning the Unraid array)')),(0,i.kt)("h4",{id:"secondary-storage"},(0,i.kt)("strong",{parentName:"h4"},"Secondary Storage:")),(0,i.kt)("p",null,"This is the location where files will be moved to if appropriate."),(0,i.kt)("p",null,"For the Secondary storage drop-down:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"None: This means that there is no secondary storage set for this\nshare i.e Secondary storage is optional"),(0,i.kt)("li",{parentName:"ul"},'if Primary storage is a pool name, then the only options are\n"none" and "Array"'),(0,i.kt)("li",{parentName:"ul"},'if Primary storage is "Array", then only "none" appears as an\noption'),(0,i.kt)("li",{parentName:"ul"})),(0,i.kt)("h3",{id:"unraid-611-and-earlier"},"Unraid 6.11 and earlier"),(0,i.kt)("p",null,"The following settings are only found in Unraid 6.11 and earlier. They\nachieve the same functionality as the settings available in 6.12 but are\npresented differently."),(0,i.kt)("h4",{id:"use-cache-and-mover-behavior-with-user-shares"},(0,i.kt)("strong",{parentName:"h4"},"Use Cache (and Mover Behavior with User Shares)")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": Starting with Unraid 6.9.0 multiple pools can exist and they\ncan have any name the user chooses. Any of these pools can act act as a\ncache in the way Unraid uses the term. The word cache therefore is\nreferring to this functionality and not necessarily to the pool name."),(0,i.kt)("p",null,"Unraid includes an application called ",(0,i.kt)("strong",{parentName:"p"},"mover"),' that is used in\nconjunction with User Shares. It\'s behavior controlled by the "Use Cache\nfor new files" setting under each User Share. The way these different\nsettings operate is as follows'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Yes"),": Write new files to the cache as long as the free space on\nthe cache is above the ",(0,i.kt)("em",{parentName:"li"},"Minimum free space")," value. If the free space\nis below that then by-pass the cache and write the files directly to\nthe main array.")),(0,i.kt)("p",null,": When ",(0,i.kt)("em",{parentName:"p"},"mover")," runs it will attempt to move files to the main array as\nlong as they are not currently open. Which array drive will get the\nfile is controlled by the combination of the ",(0,i.kt)("em",{parentName:"p"},"Allocation method"),",\n",(0,i.kt)("em",{parentName:"p"},"Split level"),", and Minimum Free Space setting for the share."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"No"),": Write new files directly to the array. Which array drive\nwill get the file is controlled by the combination of the\n",(0,i.kt)("em",{parentName:"li"},"Allocation method"),", ",(0,i.kt)("em",{parentName:"li"},"Split level"),", and Minimum Free Space setting\nfor the share.")),(0,i.kt)("p",null,": When ",(0,i.kt)("em",{parentName:"p"},"mover")," runs it will take ",(0,i.kt)("strong",{parentName:"p"},"no")," action on files for this share\neven if there are files on the cache that logically belong to this\nshare."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Only"),": Write new files directly to the cache. If the free space\non the cache is below the ",(0,i.kt)("em",{parentName:"li"},"Minimum free space")," setting for the cache\nthen the write will fail with an out-of-space error.")),(0,i.kt)("p",null,": When ",(0,i.kt)("em",{parentName:"p"},"mover")," runs it will take ",(0,i.kt)("strong",{parentName:"p"},"no")," action on files for this share\neven if there are files on the main array that logically belong to\nthis share."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Prefer"),": Write new files to the cache if the free space on the\ncache is above the ",(0,i.kt)("em",{parentName:"li"},"Minimum free space")," setting for the share, and\nif the free space falls below that value then write the files to the\nmain array instead.")),(0,i.kt)("p",null,": When ",(0,i.kt)("em",{parentName:"p"},"mover")," runs it will attempt to move any files for this share\nthat are on the main array back to the cache as long as the free\nspace on the cache is above the ",(0,i.kt)("em",{parentName:"p"},"Minimum free space")," setting for the\ncache\n: It is the default setting for the ",(0,i.kt)("em",{parentName:"p"},"appdata")," and ",(0,i.kt)("em",{parentName:"p"},"System")," Shares that\nare used to support the Docker and VM sub-systems. In typical use\nyou want the files/folders belonging to these shares to reside on\nthe cache as you get much better performance from Docker containers\nand VMs if their files are not on the main array (due to the cost of\nmaintaining parity on the main array significantly slowing down\nwrite operations).\n: This setting works for a share even if you do not have (yet) a\nphysical cache drive(s) as then files will simply be written\ndirectly to the array. If at a later date you add a cache drive\nmover will now automatically try and move the files in any share set\nto Prefer to the pool defined as the cache for the share to improve\nperformance. This is why it is the default for shares that are\ntypically located on the cache rather than ",(0,i.kt)("em",{parentName:"p"},"Only")," as it caters for\nthose who do not (yet) have a cache drive."),(0,i.kt)("h5",{id:"moving-files-from-a-pool-cache-to-the-array"},(0,i.kt)("strong",{parentName:"h5"},"Moving Files from a Pool (cache) to the Array")),(0,i.kt)("p",null,"This is the more traditional usage of a pool for caching where one wants\nthe files for a particular share initially written to a pool acting as a\ncache to maximise write speed, but later you want it to be moved to the\nmain array for long term storage. Most of the time all that is required\nis to set the Use Cache setting for the share to Yes and the default\nbehaviour handles the rest with no further user interaction."),(0,i.kt)("p",null,"Sometimes for one reason or another users find that the files seem to be\n'stuck' on a pool. The way to proceed in such a case to get the files\nbelonging to a share from a pool onto the main array is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Disable ",(0,i.kt)("strong",{parentName:"li"},"Docker/VM")," services if they are enabled (as files open in\nthese services cannot be moved)."),(0,i.kt)("li",{parentName:"ul"},"Change the Use Cache setting for the share to ",(0,i.kt)("strong",{parentName:"li"},"Yes")),(0,i.kt)("li",{parentName:"ul"},"Manually run ",(0,i.kt)("strong",{parentName:"li"},"mover")," from the ",(0,i.kt)("em",{parentName:"li"},"Main")," tab to get it to move ",(0,i.kt)("em",{parentName:"li"},"Yes"),"\ntype shares from array to the pool (cache)."),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("strong",{parentName:"li"},"mover")," finishes you can re-enable the Docker and/or VMs\nservices you use if you disabled them earlier."),(0,i.kt)("li",{parentName:"ul"},"(optional) change the ",(0,i.kt)("strong",{parentName:"li"},"Use Cache")," setting to ",(0,i.kt)("em",{parentName:"li"},"Only")," to say files\nfor this share can never be written to the array.")),(0,i.kt)("h5",{id:"moving-files-from-the-array-to-a-pool-cache"},(0,i.kt)("strong",{parentName:"h5"},"Moving Files from the Array to a Pool (cache)")),(0,i.kt)("p",null,"One typically wants files associated with running Docker containers or\nVMs on a pool to maximise performance. It is not unusual for one reason\nor another to find that one has files on the main array which you really\nwant to be on a pool. In particular this is likely to happen for the\nappdata or system shares"),(0,i.kt)("p",null,"The way to proceed to get the files belonging to a share from the main\narray onto a pool is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Disable ",(0,i.kt)("strong",{parentName:"li"},"Docker/VM")," services if they are enabled (as files open in\nthese services cannot be moved)"),(0,i.kt)("li",{parentName:"ul"},"Change the Use Cache setting for the share to ",(0,i.kt)("strong",{parentName:"li"},"Prefer")),(0,i.kt)("li",{parentName:"ul"},"Manually run ",(0,i.kt)("strong",{parentName:"li"},"mover")," from the ",(0,i.kt)("em",{parentName:"li"},"Main")," tab to get it to move\n",(0,i.kt)("em",{parentName:"li"},"Prefer")," type shares from array to the pool (cache)."),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("strong",{parentName:"li"},"mover")," finishes you can re-enable the Docker and/or VMs\nservices you use."),(0,i.kt)("li",{parentName:"ul"},"(optional) change the ",(0,i.kt)("strong",{parentName:"li"},"Use Cache")," setting to ",(0,i.kt)("em",{parentName:"li"},"No")," to say files for\nthis share can never be cached on a pool.")),(0,i.kt)("h2",{id:"disk-shares"},"Disk Shares"),(0,i.kt)("p",null,"These are shares that relate to individual array drives or pools within\nthe Unraid system and that are visible over the network. By default if\nUser Shares are enabled then Disk Shares are not enabled (see the\nIMPORTANT section below for the reason why this is the case). If you\nwant the Disk Shares to be enabled then this is done under\nSettings-",">","Global Share Settings. The Disk Shares will then appear in\nthe Unraid GUI under a Disk Shares section on the Shares tab. You will\nwant to modify the user permissions to restrict network user access if\ndesired, just like User Shares."),(0,i.kt)("p",null,"When viewed at the Linux level the physical devices or pools will appear\ndirectly under ",(0,i.kt)("em",{parentName:"p"},"/mnt")," with a name corresponding to the array drive or\npool. (This happens regardless of whether Disk Shares are enabled) .\nExamples of such names are:"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"/mnt/diskX:")," these are array drives where X corresponds to the disk\nnumber that shows in the Unraid GUI. The corresponding Disk Share at the\nnetwork level would be ",(0,i.kt)("em",{parentName:"p"},"diskX")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"/mnt/pool-name:")," These are pools. A single pool can actually consist of\nmultiple drives but Unraid treats them as if they were one drive. The\ncommonest example of a pool-name is ",(0,i.kt)("em",{parentName:"p"},"'cache'")," but it can be any name\ndefined by the user. The corresponding Disk Share at the network level\nwould be ",(0,i.kt)("em",{parentName:"p"},"pool-name.")),(0,i.kt)("p",null,"The Unraid flash device that is used to boot Unraid and store all user\nsettings is also a physical device, but is not normally considered to be\na Disk Share. If you want it visible on the network then you can click\non it in the Main tab and set it to appear at the network level as the\n'",(0,i.kt)("em",{parentName:"p"},"flash"),"' share. At the Linux level it is mounted at /",(0,i.kt)("em",{parentName:"p"},"boot")),(0,i.kt)("p",null,"\\"),(0,i.kt)("p",null,"+----------------------------------------------------------------------+\n| ",(0,i.kt)("strong",{parentName:"p"},"IMPORTANT")," |\n+======================================================================+\n| If you have both ",(0,i.kt)("em",{parentName:"p"},"Disk Shares")," and ",(0,i.kt)("em",{parentName:"p"},"User Shares")," enabled then there |\n| is an important restriction that you must observe if you want to |\n| avoid potential data loss. What you must ",(0,i.kt)("strong",{parentName:"p"},"NEVER")," do is copy |\n| between a ",(0,i.kt)("strong",{parentName:"p"},"User Share")," and a ",(0,i.kt)("strong",{parentName:"p"},"Disk Share")," in the same copy |\n| operation where the folder name on the Disk Share corresponds to the |\n| User Share name. This is because at the base system level Linux does |\n| not understand ",(0,i.kt)("em",{parentName:"p"},"User Shares")," and therefore that a file on a ",(0,i.kt)("em",{parentName:"p"},"Disk |\n| Share")," and a ",(0,i.kt)("em",{parentName:"p"},"User Share")," can be different views of the ",(0,i.kt)("strong",{parentName:"p"},"same")," |\n| file. If you mix the share types in the same copy command you can |\n| end up trying to copy the file to itself which results in the file |\n| being truncated to zero length and its content thus being lost.\\ |\n| \\ |\n| There is no problem if the copy is between shares of the same type, |\n| or copying to/from a disk mounted as an Unassigned Device.. |\n+----------------------------------------------------------------------+\n| |\n+----------------------------------------------------------------------+"),(0,i.kt)("p",null,"There is another quirk of the interaction between Linux and the Unraid\nUser Share system that users can encounter if they are working at the\nDisk Share level. The Linux command for Move is implemented by first\ntrying a rename on the file (which is fast) and only if that fails does\nit do a copy then delete operation. This can mean that under some\ncircumstances when working locally on the server (e.g. from the command\nline when you try to move files from one user share to another, Linux\nwill often simply rename the files so they have a different path on the\nsame disk, in violation of any user share settings such as included\ndisks. The workaround for this is to instead explicitly copy from source\nto destination so that new files get created following the user share\nsettings, then deleting from the source."),(0,i.kt)("h2",{id:"network-access"},"Network access"),(0,i.kt)("p",null,"You can control what protocols should be supported for accessing the\nUnraid server across the network. Click on Settings-",">","Network Services\nto see the various options available.. These options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"SMB"),": This the standard protocol used by Windows systems. It is\nwidely implemented on other YS."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"NFS"),": ",(0,i.kt)("strong",{parentName:"li"},"N"),"etwork ",(0,i.kt)("strong",{parentName:"li"},"F"),"ile ",(0,i.kt)("strong",{parentName:"li"},"S"),"ystem. This is a protocol widely\nused on Unix compatible system."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"AFP"),": ",(0,i.kt)("strong",{parentName:"li"},"A"),"pple ",(0,i.kt)("strong",{parentName:"li"},"F"),"ile ",(0,i.kt)("strong",{parentName:"li"},"P"),"rotocol. This is the protocol that\nhas historically been used on Apple Mac system. It is now a\ndeprecated option as the latest versions of MacOS now use SMB as the\ntransferred protocol for accessing files and folders over the\nnetwork."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"FTP"),": ",(0,i.kt)("strong",{parentName:"li"},"F"),"ile ",(0,i.kt)("strong",{parentName:"li"},"T"),"ransfer ",(0,i.kt)("strong",{parentName:"li"},"P"),"rotocol.")),(0,i.kt)("p",null,"When you click on the name of a share on the Shares tab then there is a\nsection that allows you to control the visibility of the share on the\nnetwork for each of the protocols you have enabled. The setting is\nlabelled ",(0,i.kt)("strong",{parentName:"p"},"Export")," and has the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Yes"),": With this setting the share will be visible across the\nnetwork."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Yes (Hidden)"),": With this setting the share can be accessed across\nthe network but will not be listed when browsing the shares on the\nserver. Users can still access the share as long as they know the\nname and the user is prepared to enter in manually."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"No"),": With this option selected then it is not possible to access\nthe share across the network.")),(0,i.kt)("h2",{id:"access-permissions"},"Access Permissions"),(0,i.kt)("p",null,"When you click on the name of a share on the Shares tab then there is a\nsection that allows you to control the access rights of the share on the\nnetwork for each of the protocols you have enabled. The setting is\nlabelled ",(0,i.kt)("strong",{parentName:"p"},"Security")," and has the following options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Public"),": All users have both read and write access to the\ncontents of the share"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Secure"),": All users including guests have read access, you select\nwhich of your users have write access"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Private"),": You select which of your users have access and for each\nuser whether that user has read/write or read-only access.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Windows 'Gotcha'")),(0,i.kt)("p",null,"There is an issue with the way Windows handles network shares that many\nusers fall foul of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This is the fact that Windows only allows a ",(0,i.kt)("strong",{parentName:"li"},"single")," username to\nbe used to connect to a specific server at any given time. All\nattempts to then connect to a different share on the same server\nthat are not public shares put up a Username/Password prompt and\nthis fails as though you have entered an incorrect password for this\nusername. If you have any shares on the server set to ",(0,i.kt)("strong",{parentName:"li"},"Private")," or\n",(0,i.kt)("strong",{parentName:"li"},"Secure")," access it can therefore be important that you connect to\nsuch a share first before any shares set for ",(0,i.kt)("strong",{parentName:"li"},"Public")," access which\nmay connect as a guest user and make subsequent attempts to connect\nwith a specific user fail."),(0,i.kt)("li",{parentName:"ul"},"A workaround that can help with avoiding this issue is the fact that\nif you access a server both by it's network name and via it's IP\naddress then Windows will treat it a two separate servers as far as\nauthentication is concerned.")))}c.isMDXComponent=!0},920:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/High-Water_Allocation_Method-73aceb5fbd6984e821b9a40d254126be.JPG"},3941:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Level_0-85fa26cbb640e98765ca207be6fdd694.JPG"},5546:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Movie_Share-0de879d5fb3dc6fba964744db5bb6827.jpg"},4959:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Movies_Share_Disk_View-93330078b8f073697286d7f11d8cf2fe.JPG"},9204:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Split_level_1-6d97a2c34c343f745537069876f68a60.JPG"},4224:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Split_level_2-0ce359bddd479b9830e12615ebe07fa1.JPG"},8376:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Split_level_3-c5fd4917d16153206e797c5042ea33ac.JPG"}}]);